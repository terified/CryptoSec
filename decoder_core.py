import base64, zlib, lzma, gzip, marshal, re, os
import subprocess
import py_compile
import uncompyle6
import dis
import importlib.util

def clear():
    os.system("cls" if os.name == "nt" else "clear")

import os

def decode_string_input():
    file_path = input("–£–∫–∞–∂–∏ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Å–æ —Å—Ç—Ä–æ–∫–æ–π: ")

    if not os.path.isfile(file_path):
        print("[-] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(file_path, "r", encoding="utf-8") as file:
            encrypted_string = file.read()

        if not encrypted_string:
            print("[-] –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ –ø—É—Å—Ç–∞.")
            return

        encrypted_string = encrypted_string.replace("\n", "").replace(" ", "")
        missing_padding = len(encrypted_string) % 4
        if missing_padding:
            encrypted_string += '=' * (4 - missing_padding)

        output_name = input("–í–≤–µ–¥–∏ –∏–º—è –¥–ª—è pyc —Ñ–∞–π–ª–∞ (–±–µ–∑ .pyc): ") or "output"
        output_folder = input("–í–≤–µ–¥–∏ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø–∞–ø–∫–∏ pyc_files): ") or "pyc_files"

        os.makedirs(output_folder, exist_ok=True)
        output_path = os.path.join(output_folder, f"{output_name}.pyc")

        decode_and_save(encrypted_string, output_path)

    except Exception as e:
        print(f"[-] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

def func(code):
    return zlib.decompress(base64.b64decode(code[::-1]))

def mzb():
    print('üîç Decompile Marshal, Zlib, Base64 from string in .txt file')
    file_path = input('üìÑ Path to .txt file with encoded string: ')
    output_name = input('üíæ Output filename (without .py): ')
    
    # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ txt
    try:
        with open(file_path, 'r') as f:
            content = f.read().strip()
    except FileNotFoundError:
        print('‚ùå File not found!')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è
    temp_code = f'''
from sys import stdout
from uncompyle6.main import decompile
import base64, zlib, marshal

x = marshal.loads(zlib.decompress(base64.b64decode({repr(content)})))
decompile(2.7, x, stdout)
'''

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.makedirs('pyc_files', exist_ok=True)
    temp_file = 'mi_temp.py'
    with open(temp_file, 'w') as f:
        f.write(temp_code)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–∫–æ–º–ø–∏–ª—è—Ü–∏—é
    output_path = f'pyc_files/{output_name}.py'
    os.system(f'python2 {temp_file} > "{output_path}"')

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(temp_file)

    print(f'‚úÖ Decompiled code saved to: {output_path}')

    # –ü–æ–≤—Ç–æ—Ä?
    again = input('üîÅ Want to decrypt again? (Y/N): ').lower()
    if again == 'y':
        mzb()
    else:
        print('üëã Done.')

def save_encrypted_code():
    # –ó–∞–¥–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–æ–¥–æ–º
    file_path = r"C:\Users\h1xx\Desktop\CryptoSec\base64_zlib_decode.txt"

    if not os.path.isfile(file_path):
        print("[-] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é code
    with open(file_path, "rb") as f:
        code = f.read()

    # –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–≤–æ–µ–≥–æ exec((_)(b'...'))
    regex = re.compile(rb"^exec\(\(_\)\(b'(.+)'\)\)$")

    # –¶–∏–∫–ª –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    while True:
        result = regex.search(code)
        if not result:
            break
        code = func(result.group(1))

    # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –¥–ª—è pyc —Ñ–∞–π–ª–∞
    output_name = input("–í–≤–µ–¥–∏ –∏–º—è –¥–ª—è pyc —Ñ–∞–π–ª–∞ (–±–µ–∑ .py): ") or "output"
    output_folder = input("–í–≤–µ–¥–∏ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø–∞–ø–∫–∏ pyc_files): ") or "pyc_files"

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(output_folder, exist_ok=True)

    # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    output_path = os.path.join(output_folder, output_name + ".pyc")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open(output_path, "wb") as f:
        f.write(code)

    print(f"\n[+] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")

def decode_and_save(data, filename):
    """ Decodes and saves the decoded data into a file. """
    try:
        decoded = base64.b64decode(data[::-1])  # Reverse string and decode
        decoded = zlib.decompress(decoded)      # Zlib decompression
        decoded = lzma.decompress(decoded)      # LZMA decompression
        decoded = gzip.decompress(decoded)      # Gzip decompression
        code_obj = marshal.loads(decoded)       # Unmarshal

        with open(filename, 'wb') as f:
            f.write(code_obj)  # Save the final decoded data
        print(f"Decoded data saved as {filename}")
    except Exception as e:
        print(f"[!] Error in decode_and_save: {e}")